{
  "hash": "7e2743f7cc2c6740f74fc4f7dd6e5a6a",
  "result": {
    "markdown": "---\ntitle: \"챗GPT 데이터 사이언스\"\nsubtitle: \"3주차: API 프로그래밍\"\ndescription: |\n  데이터 사이언스 JSON 파일과 API 프로그래밍을 학습합니다.\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\nformat:\n  html:\n    theme: flatly\n    code-fold: true\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\n    default-image-extension: jpg\nfilters:\n   - lightbox\nlightbox: auto\nlink-citations: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    echo: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# 웹 데이터\n\n## `urllib`\n\n[파머 펭귄 데이터셋](https://gist.github.com/slopp/ce3b90b9168f2f921784de84fa445651) 웹주소에서 데이터를 마치 로컬파일 데이터셋을 가져오듯이 동일한 방식으로 가져온다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom urllib.request import urlretrieve\nimport pandas as pd\n\nurl = 'https://gist.githubusercontent.com/slopp/ce3b90b9168f2f921784de84fa445651/raw/4ecf3041f0ed4913e7c230758733948bc561f434/penguins.csv'\n\nurlretrieve(url, 'data/penguins.csv')\n\n# Read file into a DataFrame and print its head\n#> ('data/penguins.csv', <http.client.HTTPMessage object at 0x0000021ED534B490>)\npenguins_df = pd.read_csv('data/penguins.csv', sep=',')\nprint(penguins_df.head())\n#>    rowid species     island  ...  body_mass_g     sex  year\n#> 0      1  Adelie  Torgersen  ...       3750.0    male  2007\n#> 1      2  Adelie  Torgersen  ...       3800.0  female  2007\n#> 2      3  Adelie  Torgersen  ...       3250.0  female  2007\n#> 3      4  Adelie  Torgersen  ...          NaN     NaN  2007\n#> 4      5  Adelie  Torgersen  ...       3450.0  female  2007\n#> \n#> [5 rows x 9 columns]\n```\n:::\n\n\n## `requests`\n\n`requests`는 Python에서 HTTP 요청을 보내는 작업을 단순화하고, 사용자 친화적으로 만든 패키지다. GET, POST, DELETE, PUT 등의 다양한 HTTP 메소드를 사용하여 웹 서버와 통신할 수 있고, `requests`는 JSON 응답을 쉽게 파싱하고, 쿠키를 유지하며, 파일 업로드, HTTP 헤더 조작, SSL 인증 등의 복잡한 작업을 쉽게 처리할 수 있다.\n\n`urllib`는 Python의 표준 라이브러리 중 하나지만, 사용법이 다소 복잡하고 번거로운데 반해, `requests`는 인터페이스가 간결하고 직관적이어서 같은 작업을 더 쉽게 수행할 수 있다.\n\n::: panel-tabset\n### `requests`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\n\nresponse = requests.get('https://r2bit.com')\n\nprint(response.status_code)\nprint(response.text)\n```\n:::\n\n\n### `urllib`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom urllib.request import urlopen\nresponse = urlopen('https://r2bit.com')\n\nprint(response.getcode())\nprint(response.read())\n```\n:::\n\n:::\n\n## `BeautifulSoup`\n\n`BeautifulSoup`은 Python에서 HTML과 XML 문서를 파싱하기 위한 라이브러리다. 웹 스크래핑 작업에서 특히 유용하며, 복잡하고 잘 정돈되지 않은 웹 페이지에서 데이터를 쉽게 추출할 수 있다.\n\n`BeautifulSoup`은 문서를 트리 구조로 파싱하고, 이 트리를 통해 원하는 정보를 찾고, 수정하고, 네비게이트 할 수 있다. 예를 들어, HTML 문서에서 특정 태그를 찾거나, 특정 클래스 또는 ID를 가진 요소를 검색할 수 있다.\n\n`requests`와 `BeautifulSoup`는 웹 스크래핑 작업에서 함께 사용되는 경우가 많다. 일반적으로 `requests`를 사용하여 웹페이지의 HTML을 가져오고, 그런 다음 `BeautifulSoup`을 사용하여 가져온 HTML을 파싱하고 원하는 정보를 추출하는 방식이다.\n\n::: panel-tabset\n### 웹사이트 제목\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://r2bit.com'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\nsoup = BeautifulSoup(html_doc)\n\n# pretty_soup = soup.prettify()\nr2bit_title = soup.title\n\nprint(r2bit_title)\n#> <title>한국 R 사용자회</title>\n```\n:::\n\n\n### 링크\n\n\n::: {.cell}\n\n```{.python .cell-code}\na_tags = soup.find_all('a')\n\nfor link in a_tags:\n    print(link.get('href'))\n#> ./index.html\n#> ./index.html\n#> #\n#> ./about.html\n#> https://r2bit.com/chatGPT/\n#> ./bitstat.html\n#> ./packages.html\n#> ./book.html\n#> ./data.html\n#> #\n#> ./edutech.html\n#> ./swc.html\n#> ./learnr.html\n#> ./training.html\n#> ./blog.html\n#> #\n#> https://use-r.kr/\n#> https://www.meetup.com/seoul-r-meetup\n#> https://tidyverse-korea.github.io/seoul-R/\n#> https://r2bit.com/seoul-r/\n#> https://quarto.org/\n#> ./contest.html\n#> https://r2bit.com\n#> https://www.youtube.com/channel/UCW-epmIvjBEhhVXw_F0Nqbw\n#> https://github.com/bit2r/quarto\n#> https://www.facebook.com/groups/tidyverse\n#> None\n#> None\n#> None\n#> https://r2bit.com/bitSlide/slideshow/202210-hongik-v2\n#> https://statkclee.github.io/ds-authoring/ds-world-student.html\n#> None\n#> None\n#> https://www.sharingkorea.net/gboard/\n#> https://r2bit.com/sen\n#> https://choonghyunryu.github.io/workshop_lecture/\n#> None\n#> None\n#> https://www.msit.go.kr/\n#> #서울-r-미트업\n#> #r-사용자회-회원-가입\n#> https://www.meetup.com/seoul-r-meetup\n#> https://r-community.org/usergroups/\n#> https://r2bit.com/\n#> https://use-r.kr/\n#> https://r2bit.com/seoul-r\n#> https://www.youtube.com/channel/UCW-epmIvjBEhhVXw_F0Nqbw\n#> https://www.facebook.com/groups/tidyverse\n#> https://korea-r-user-group.slack.com\n#> https://forms.gle/ByJy34PkFdMJXHbe6\n#> https://quarto.org/\n```\n:::\n\n:::\n\n# JSON 파일\n\nJSON(Javascript Object Notation, 자바스크립트 객체 표기법)은 가장 흔한 일반적인 웹 데이터 형식으로 데이터를 저장하거나 전송할 때 많이 사용되는 가벼운 자료형으로, 사람이 읽고 쓰기 쉬우며, 기계가 파싱하고 생성하기도 쉽다.\n\n-   언어 독립성: JSON은 JavaScript에서 파생되었지만, 거의 모든 프로그래밍 언어는 JSON 데이터를 파싱하는 라이브러리를 가지고 있고, 다양한 언어로 작성된 시스템 간에 데이터를 교환하는 데 아주 유용하게 작용한다.\n-   데이터 구조: JSON은 데이터를 구조화하는 방법도 제공하여 Nested JSON을 통해 중첩된 키-값 쌍을 통해 복잡한 데이터 구조를 표현할 수 있다.\n-   웹 표준: JSON은 웹 애플리케이션에서 서버와 클라이언트 사이의 데이터를 교환하는 표준으로 AJAX(Asynchronous JavaScript And XML)와 같은 기술이 이 형식을 기반으로 동작한다.\n-   읽기 쉬움: JSON 형식은 사람이 읽기 쉽기 때문에 디버깅을 도울 뿐만 아니라, 데이터를 보다 쉽게 이해하고 수정할 수 있다는 장점이 있다.\n\n## 예제\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndataframe_df <- tribble(~\"Name\", ~\"Age\",\n                        \"Alice\", 25,\n                        \"Bob\", 30,\n                        \"Charlie\", 35)\n\ngt::gt(dataframe_df)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"gouikntocn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#gouikntocn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#gouikntocn thead, #gouikntocn tbody, #gouikntocn tfoot, #gouikntocn tr, #gouikntocn td, #gouikntocn th {\n  border-style: none;\n}\n\n#gouikntocn p {\n  margin: 0;\n  padding: 0;\n}\n\n#gouikntocn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#gouikntocn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#gouikntocn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#gouikntocn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#gouikntocn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gouikntocn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gouikntocn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gouikntocn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#gouikntocn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#gouikntocn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#gouikntocn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#gouikntocn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#gouikntocn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#gouikntocn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#gouikntocn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#gouikntocn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#gouikntocn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#gouikntocn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#gouikntocn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gouikntocn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#gouikntocn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#gouikntocn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#gouikntocn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gouikntocn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#gouikntocn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#gouikntocn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gouikntocn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gouikntocn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#gouikntocn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gouikntocn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#gouikntocn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gouikntocn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gouikntocn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gouikntocn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gouikntocn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gouikntocn .gt_left {\n  text-align: left;\n}\n\n#gouikntocn .gt_center {\n  text-align: center;\n}\n\n#gouikntocn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#gouikntocn .gt_font_normal {\n  font-weight: normal;\n}\n\n#gouikntocn .gt_font_bold {\n  font-weight: bold;\n}\n\n#gouikntocn .gt_font_italic {\n  font-style: italic;\n}\n\n#gouikntocn .gt_super {\n  font-size: 65%;\n}\n\n#gouikntocn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#gouikntocn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#gouikntocn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#gouikntocn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#gouikntocn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#gouikntocn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#gouikntocn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Name\">Name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Age\">Age</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Name\" class=\"gt_row gt_left\">Alice</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">25</td></tr>\n    <tr><td headers=\"Name\" class=\"gt_row gt_left\">Bob</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">30</td></tr>\n    <tr><td headers=\"Name\" class=\"gt_row gt_left\">Charlie</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">35</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n6가지 JSON 파일 표현방법\n\n-   record: 각 레코드가 사전인 목록.\n-   column: 키가 열 레이블인 중첩 딕셔너리.\n-   split: 인덱스, 열, 데이터가 포함된 딕셔너리.\n-   index: 키가 인덱스 레이블인 중첩 딕셔너리.\n-   values: 그냥 값 배열.\n-   table: 스키마와 데이터를 포함하는 중첩된 딕셔너리(Apache Arrow 형식과 상호 운용성을 목표로 하는 더 복잡한 형식).\n\n::: panel-tabset\n### record\n\n``` bash\n[\n    {\"Name\": \"Alice\", \"Age\": 25},\n    {\"Name\": \"Bob\", \"Age\": 30},\n    {\"Name\": \"Charlie\", \"Age\": 35}\n]\n```\n\n### column\n\n``` bash\n{\n    \"Name\": {\"0\": \"Alice\", \"1\": \"Bob\", \"2\": \"Charlie\"},\n    \"Age\": {\"0\": 25, \"1\": 30, \"2\": 35}\n}\n```\n\n### split\n\n``` bash\n{\n    \"columns\": [\"Name\", \"Age\"],\n    \"index\": [0, 1, 2],\n    \"data\": [[\"Alice\", 25], [\"Bob\", 30], [\"Charlie\", 35]]\n}\n```\n\n### index\n\n``` bash\n{\n    \"0\": {\"Name\": \"Alice\", \"Age\": 25},\n    \"1\": {\"Name\": \"Bob\", \"Age\": 30},\n    \"2\": {\"Name\": \"Charlie\", \"Age\": 35}\n}\n```\n\n### values\n\n``` bash\n[\n    [\"Alice\", 25],\n    [\"Bob\", 30],\n    [\"Charlie\", 35]\n]\n```\n\n### table\n\n``` bash\n{\n    \"schema\": {\n        \"fields\": [\n            {\"name\": \"index\", \"type\": \"integer\"},\n            {\"name\": \"Name\", \"type\": \"string\"},\n            {\"name\": \"Age\", \"type\": \"integer\"}\n        ],\n        \"primaryKey\": [\"index\"],\n        \"pandas_version\": \"0.20.0\"\n    },\n    \"data\": [\n        {\"index\": 0, \"Name\": \"Alice\", \"Age\": 25},\n        {\"index\": 1, \"Name\": \"Bob\", \"Age\": 30},\n        {\"index\": 2, \"Name\": \"Charlie\", \"Age\": 35}\n    ]\n}\n```\n:::\n\n## JSON 불러오기\n\n다양한 형식으로 데이터프레임 파일을 저장했다면 다음 단계로 이를 파이썬에서 불러오는 방식은 `json` 패키지를 사용한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport json\n\nwith open(\"data/json.json\") as json_file:\n    json_data = json.load(json_file)\n\nfor item in json_data:\n    if isinstance(item, dict):  # Check if the item is a dictionary\n        for k in item.keys():\n            print(k + ': ', item[k])\n    \n#> Name:  Alice\n#> Age:  25\n#> Name:  Bob\n#> Age:  30\n#> Name:  Charlie\n#> Age:  35\n```\n:::\n\n\n## pandas 불러오기\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\njson_pd = pd.read_json(\"data/json.json\")\n\nprint(json_pd.describe())\n#>         Age\n#> count   3.0\n#> mean   30.0\n#> std     5.0\n#> min    25.0\n#> 25%    27.5\n#> 50%    30.0\n#> 75%    32.5\n#> max    35.0\n```\n:::\n\n\n# API\n\n**API(\"Application Programming Interface)**는 서로 다른 소프트웨어 시스템 간에 상호작용하는 방법을 정의한 것으로 API를 통해 함수, 클래스, 프로토콜, 데이터 구조 등을 포함할 수 있다.\n\nAPI의 주요 목적은 소프트웨어 개발을 단순화하고 표준화하는 것으로, API를 사용하면 개발자가 특정 기능을 처음부터 새롭게 개발할 필요 없이 이미 개발된 기능을 재사용할 수 있어, API를 통해 서로 다른 시스템 간의 상호작용을 가능하게 하므로, 시스템 간의 통합을 단순화시킬 수 있다.\n\n웹 API는 일반적으로 HTTP를 통해 통신하며, 이를 통해 웹 서버에서 데이터를 요청하거나 웹 서버에 데이터를 보낼 수 있다. 이러한 웹 API를 통해 개발자는 웹 사이트, 애플리케이션, 서비스 등에서 다른 서비스의 기능이나 데이터를 활용할 수 있다. 예를 들어, 소셜 미디어 사이트의 API를 사용하면 개발자는 사용자가 해당 사이트에서 직접 게시물을 공유하거나 댓글을 작성하는 등의 기능을 자신의 애플리케이션에 통합할 수 있다. 이렇게 API를 사용하면 개발자는 기존의 플랫폼과 서비스에서 제공하는 기능과 데이터를 활용하여 새로운 애플리케이션을 더 빠르고 효과적으로 구축할 수 있다.\n\n## OMDB API\n\n[OMDb API - The Open Movie Database](https://www.omdbapi.com/)에서 영화 API에 대한 다양한 정보를 얻을 수 있다.\n\n::: panel-tabset\n\n### API 사양서\n\n[OMDb API - The Open Movie Database](https://www.omdbapi.com/)\n\n### API 시험\n\n![](images/gui_squid_game.jpg){fig-align=\"center\" width=\"1003\"}\n\n### 직접 호출\n\n![](images/api_squid_game.jpg){fig-align=\"center\" width=\"689\"}\n\n### R API 호출\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(tidyverse)\n\nsquid_game_req <- glue::glue(\"http://www.omdbapi.com/\",\n           \"?i={Sys.getenv('OMDB_API_ID')}\",\n           \"&apikey={Sys.getenv('OMDB_API_KEY')}\",\n           \"&t=squid+game\")\n\nsquid_resp <- GET(squid_game_req)\n\njsonlite::fromJSON(content(squid_resp, \"text\")) %>% \n  enframe() %>% \n  mutate(value = map_chr(value, 1))\n#> # A tibble: 22 × 2\n#>    name     value                                                               \n#>    <chr>    <chr>                                                               \n#>  1 Title    Squid Game                                                          \n#>  2 Year     2021–                                                               \n#>  3 Rated    TV-MA                                                               \n#>  4 Released 17 Sep 2021                                                         \n#>  5 Runtime  N/A                                                                 \n#>  6 Genre    Action, Drama, Mystery                                              \n#>  7 Director N/A                                                                 \n#>  8 Writer   N/A                                                                 \n#>  9 Actors   Lee Jung-jae, Park Hae-soo, Yasushi Iwaki                           \n#> 10 Plot     Hundreds of cash-strapped players accept a strange invitation to co…\n#> # ℹ 12 more rows\n```\n:::\n\n\n### 파이썬 API 호출\n\n``` bash\nimport requests\n\nurl = 'http://www.omdbapi.com/?i=ttxxxxx&apikey=47xxxx&t=squid+game'\n\nr = requests.get(url)\nprint(r.text)\n\n{\"Title\":\"Squid Game\",\"Year\":\"2021–\",\"Rated\":\"TV-MA\",\"Released\":\"17 Sep 2021\",\"Runtime\":\"N/A\",\"Genre\":\"Action, Drama, Mystery\",\"Director\":\"N/A\",\"Writer\":\"N/A\",\"Actors\":\"Lee Jung-jae, Park Hae-soo, Yasushi Iwaki\",\"Plot\":\"Hundreds of cash-strapped players accept a strange invitation to compete in children's games. Inside, a tempting prize awaits with deadly high stakes. A survival game that has a whopping 45.6 billion-won prize at stake.\",\"Language\":\"Korean, English, Urdu\",\"Country\":\"South Korea\",\"Awards\":\"Won 6 Primetime Emmys. 46 wins & 80 nominations total\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BYWE3MDVkN2EtNjQ5MS00ZDQ4LTliNzYtMjc2YWMzMDEwMTA3XkEyXkFqcGdeQXVyMTEzMTI1Mjk3._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.0/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"8.0\",\"imdbVotes\":\"482,476\",\"imdbID\":\"tt10919420\",\"Type\":\"series\",\"totalSeasons\":\"1\",\"Response\":\"True\"}\n```\n\n``` bash\njson_data = r.json()\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])\n    \nTitle:  Squid Game\nYear:  2021–\nRated:  TV-MA\nReleased:  17 Sep 2021\nRuntime:  N/A\nGenre:  Action, Drama, Mystery\nDirector:  N/A\nWriter:  N/A\nActors:  Lee Jung-jae, Park Hae-soo, Yasushi Iwaki\nPlot:  Hundreds of cash-strapped players accept a strange invitation to compete in children's games. Inside, a tempting prize awaits with deadly high stakes. A survival game that has a whopping 45.6 billion-won prize at stake.\nLanguage:  Korean, English, Urdu\nCountry:  South Korea\nAwards:  Won 6 Primetime Emmys. 46 wins & 80 nominations total\nPoster:  https://m.media-amazon.com/images/M/MV5BYWE3MDVkN2EtNjQ5MS00ZDQ4LTliNzYtMjc2YWMzMDEwMTA3XkEyXkFqcGdeQXVyMTEzMTI1Mjk3._V1_SX300.jpg\nRatings:  [{'Source': 'Internet Movie Database', 'Value': '8.0/10'}]\nMetascore:  N/A\nimdbRating:  8.0\nimdbVotes:  482,476\nimdbID:  tt10919420\nType:  series\ntotalSeasons:  1\nResponse:  True\n```\n\n### 보안강화\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n#> True\napi_key = os.getenv('OMDB_API_KEY')\ni = os.getenv('OMDB_API_ID')\nurl = f'http://www.omdbapi.com/?i={i}&apikey={api_key}&t=squid+game'\n\nr = requests.get(url)\nprint(r.text)\n#> {\"Title\":\"Squid Game\",\"Year\":\"2021–\",\"Rated\":\"TV-MA\",\"Released\":\"17 Sep 2021\",\"Runtime\":\"N/A\",\"Genre\":\"Action, Drama, Mystery\",\"Director\":\"N/A\",\"Writer\":\"N/A\",\"Actors\":\"Lee Jung-jae, Park Hae-soo, Yasushi Iwaki\",\"Plot\":\"Hundreds of cash-strapped players accept a strange invitation to compete in children's games. Inside, a tempting prize awaits with deadly high stakes. A survival game that has a whopping 45.6 billion-won prize at stake.\",\"Language\":\"Korean, English, Urdu\",\"Country\":\"South Korea\",\"Awards\":\"Won 6 Primetime Emmys. 46 wins & 80 nominations total\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BYWE3MDVkN2EtNjQ5MS00ZDQ4LTliNzYtMjc2YWMzMDEwMTA3XkEyXkFqcGdeQXVyMTEzMTI1Mjk3._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.0/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"8.0\",\"imdbVotes\":\"482,476\",\"imdbID\":\"tt10919420\",\"Type\":\"series\",\"totalSeasons\":\"1\",\"Response\":\"True\"}\n```\n:::\n\n\n### `.env`\n\n``` bash\nOMDB_API_KEY=47xxxx\nOMDB_API_ID=ttxxxxx\n```\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}